/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 1.0.4+7-a1eb9022+20231108-2147
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
  ModelsProject,
  ModelsCreateProject,
  ModelsUpdateProject,
  ModelsUserStub,
  ModelsInvitationResult,
  ModelsUserToProjectAssignment,
} from '..';
import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getProjectList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject[]>(
    { url: `/organisations/${orgId}/projects`, method: 'get' },
    options
  );
};

export const getGetProjectListKey = (orgId: string) =>
  [`/organisations/${orgId}/projects`] as const;

export type GetProjectListQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectList>>>;
export type GetProjectListQueryError = ErrorType<unknown>;

export const useGetProjectList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjectList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectListKey(orgId) : null));
  const swrFn = () => getProjectList(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const createProject = (
  orgId: string,
  modelsCreateProject: BodyType<ModelsCreateProject>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject>(
    {
      url: `/organisations/${orgId}/projects`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateProject,
    },
    options
  );
};

/**
 * @summary update a project
 */
export const updateProject = (
  orgId: string,
  projectId: string,
  modelsUpdateProject: BodyType<ModelsUpdateProject>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsProject>(
    {
      url: `/organisations/${orgId}/projects/${projectId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateProject,
    },
    options
  );
};

/**
 * @summary Deactivate a project
 */
export const deactivateProject = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}`, method: 'delete' },
    options
  );
};

export const getProjectUserList = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUserStub[]>(
    { url: `/organisations/${orgId}/projects/${projectId}/users`, method: 'get' },
    options
  );
};

export const getGetProjectUserListKey = (orgId: string, projectId: string) =>
  [`/organisations/${orgId}/projects/${projectId}/users`] as const;

export type GetProjectUserListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProjectUserList>>
>;
export type GetProjectUserListQueryError = ErrorType<unknown>;

export const useGetProjectUserList = <TError = ErrorType<unknown>>(
  orgId: string,
  projectId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjectUserList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(orgId && projectId);
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectUserListKey(orgId, projectId) : null));
  const swrFn = () => getProjectUserList(orgId, projectId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const inviteProjectUser = (
  orgId: string,
  projectId: string,
  modelsUserToProjectAssignment: BodyType<ModelsUserToProjectAssignment>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsInvitationResult>(
    {
      url: `/organisations/${orgId}/projects/${projectId}/users`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUserToProjectAssignment,
    },
    options
  );
};

export const removeProjectUser = (
  orgId: string,
  projectId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}/users/${userId}`, method: 'delete' },
    options
  );
};

/**
 * @summary Remove current user's membership from selected project and selected organisation
 */
export const removeProjectOwnUser = (
  orgId: string,
  projectId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/projects/${projectId}/leave`, method: 'delete' },
    options
  );
};
