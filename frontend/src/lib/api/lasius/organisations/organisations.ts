/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 1.0.6+10-d8bae9e1+20240827-1710
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';
import type { ModelsCreateOrganisation } from '../modelsCreateOrganisation';
import type { ModelsInvitationResult } from '../modelsInvitationResult';
import type { ModelsOrganisation } from '../modelsOrganisation';
import type { ModelsUpdateOrganisation } from '../modelsUpdateOrganisation';
import type { ModelsUserStub } from '../modelsUserStub';
import type { ModelsUserToOrganisationAssignment } from '../modelsUserToOrganisationAssignment';
import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary create an organisation
 */
export const createOrganisation = (
  modelsCreateOrganisation: BodyType<ModelsCreateOrganisation>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    {
      url: `/organisations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsCreateOrganisation,
    },
    options
  );
};

export const getOrganisation = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    { url: `/organisations/${orgId}`, method: 'GET' },
    options
  );
};

export const getGetOrganisationKey = (orgId: string) => [`/organisations/${orgId}`] as const;

export type GetOrganisationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganisation>>>;
export type GetOrganisationQueryError = ErrorType<unknown>;

export const useGetOrganisation = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrganisation>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrganisationKey(orgId) : null));
  const swrFn = () => getOrganisation(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary update an organisation
 */
export const updateOrganisation = (
  orgId: string,
  modelsUpdateOrganisation: BodyType<ModelsUpdateOrganisation>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsOrganisation>(
    {
      url: `/organisations/${orgId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUpdateOrganisation,
    },
    options
  );
};

/**
 * @summary delete/deactivate an organisation
 */
export const deactivateOrganisation = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>({ url: `/organisations/${orgId}`, method: 'DELETE' }, options);
};

export const getOrganisationUserList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUserStub[]>(
    { url: `/organisations/${orgId}/users`, method: 'GET' },
    options
  );
};

export const getGetOrganisationUserListKey = (orgId: string) =>
  [`/organisations/${orgId}/users`] as const;

export type GetOrganisationUserListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganisationUserList>>
>;
export type GetOrganisationUserListQueryError = ErrorType<unknown>;

export const useGetOrganisationUserList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getOrganisationUserList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetOrganisationUserListKey(orgId) : null));
  const swrFn = () => getOrganisationUserList(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary assign a user to an organisation
 */
export const inviteOrganisationUser = (
  orgId: string,
  modelsUserToOrganisationAssignment: BodyType<ModelsUserToOrganisationAssignment>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsInvitationResult>(
    {
      url: `/organisations/${orgId}/invite`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modelsUserToOrganisationAssignment,
    },
    options
  );
};

/**
 * @summary Remove selected user's membership from selected organisation
 */
export const removeOrganisationUser = (
  orgId: string,
  userId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    { url: `/organisations/${orgId}/users/${userId}`, method: 'DELETE' },
    options
  );
};
