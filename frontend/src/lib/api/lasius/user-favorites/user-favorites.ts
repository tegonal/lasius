/**
 * Lasius - Open source time tracker for teams
 * Copyright (c) Tegonal Genossenschaft (https://tegonal.com)
 *
 * This file is part of Lasius.
 *
 * Lasius is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Lasius is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Lasius.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Lasius API
 * Track your time
 * OpenAPI spec version: 1.0.4+7-a1eb9022+20231108-2147
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { ModelsUserFavorites, ModelsFavoritesRequest } from '..';
import { lasiusAxiosInstance } from '../../lasiusAxiosInstance';
import type { ErrorType, BodyType } from '../../lasiusAxiosInstance';

// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Get current user's favorite bookings list for the selected organisation
 */
export const getFavoriteBookingList = (
  orgId: string,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUserFavorites>(
    { url: `/user-favorites/organisations/${orgId}`, method: 'get' },
    options
  );
};

export const getGetFavoriteBookingListKey = (orgId: string) =>
  [`/user-favorites/organisations/${orgId}`] as const;

export type GetFavoriteBookingListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoriteBookingList>>
>;
export type GetFavoriteBookingListQueryError = ErrorType<unknown>;

/**
 * @summary Get current user's favorite bookings list for the selected organisation
 */
export const useGetFavoriteBookingList = <TError = ErrorType<unknown>>(
  orgId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getFavoriteBookingList>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof lasiusAxiosInstance>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!orgId;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetFavoriteBookingListKey(orgId) : null));
  const swrFn = () => getFavoriteBookingList(orgId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Save a new favorite booking for the current user in the selected organisation
 */
export const addFavoriteBooking = (
  orgId: string,
  modelsFavoritesRequest: BodyType<ModelsFavoritesRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<ModelsUserFavorites[]>(
    {
      url: `/user-favorites/organisations/${orgId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: modelsFavoritesRequest,
    },
    options
  );
};

/**
 * @summary Remove a favorite booking for the current user from the selected organisation
 */
export const deleteFavoriteBooking = (
  orgId: string,
  modelsFavoritesRequest: BodyType<ModelsFavoritesRequest>,
  options?: SecondParameter<typeof lasiusAxiosInstance>
) => {
  return lasiusAxiosInstance<void>(
    {
      url: `/user-favorites/organisations/${orgId}`,
      method: 'delete',
      headers: { 'Content-Type': 'application/json' },
      data: modelsFavoritesRequest,
    },
    options
  );
};
