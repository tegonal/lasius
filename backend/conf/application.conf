# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = "Npf2C14t6><ZcBjT95imn30<cbjN4fUbxhprkNvs1r=44TGtO/]0;;[cWecmAehb"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

play.allowGlobalApplication = false

play.modules.enabled += "core.LasiusModule"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Application configuration date

db {
    # initialize base data if no data exists
    clean_database_on_startup = ${?LASIUS_INITIALIZE_DATA}
    initialize_data = true

    # clean database on startup
    clean_database_on_startup = false
    clean_database_on_startup = ${?LASIUS_CLEAN_DATABASE_ON_STARTUP}

    # data loader used to intialize data in database
    data_loader = "core.db.InitialBaseDataLoader"

    # Enable support if you run a mongodb replicaset
    support_transactions = false
    support_transactions = ${?LASIUS_SUPPORTS_TRANSACTIONS}
}

play.http.context="/backend/"

play.application.loader = core.CustomApplicationLoader

play.filters.hosts {
  allowed = ["."]
  allowed = ${?ALLOWED_HOSTS}
}

# override pidfile to we can restart app in container
play.server.pidfile.path=/dev/null

# ReactiveMongo
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

mongodb.uri = "mongodb://localhost:27017/lasius"
mongodb.uri = ${?MONGODB_URI}

play.server.websocket.frame.maxLength=2m

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  http {
    parsing {
      max-uri-length = 96k
      max-header-value-length = 16k
    }
  }
  actor {
    serializers {
      persisted-event-json = "actors.serializers.PersistedEventJsonSerializer"
      logged-in-state-json = "actors.serializers.LoggedInStateJsonSerializer"
      user-time-booking-json = "actors.serializers.UserTimeBookingJsonSerializer"
    }

    serialization-bindings {
      "models.PersistedEvent" = persisted-event-json
      "domain.LoginStateAggregate$LoggedInState" = logged-in-state-json
      "domain.UserTimeBookingAggregate$UserTimeBooking" = user-time-booking-json
    }
  }
}

mongo-async-driver {
  akka {
    loglevel = "WARNING"
  }
}

## configure if
lasius.persistence.on_startup.initialize_views = true

lasius.title = Lasius
lasius.title = ${?LASIUS_TITLE}

lasius.instance = Dev
lasius.instance = ${?LASIUS_INSTANCE}

application.global = core.CustomApplicationLoader

# Akka mongo configuration
akka.persistence.journal.plugin = "akka-contrib-mongodb-persistence-journal"

akka-contrib-mongodb-persistence-journal {
  event-adapters {
    persisted-event-adapter = "models.adapters.PersistedEventAdapter"
  }
  event-adapter-bindings {
    "models.PersistedEvent" = persisted-event-adapter
  }
}

akka.persistence.snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"

akka-contrib-mongodb-persistence-snapshot {
    snapshot-is-optional = false
}

akka.contrib.persistence.mongodb.mongo.mongouri = "mongodb://localhost:27017/lasius"
akka.contrib.persistence.mongodb.mongo.mongouri = ${?MONGODB_URI}
akka.contrib.persistence.mongodb.mongo.journal-collection = "journal"
akka.contrib.persistence.mongodb.mongo.journal-index = "journal_index"
akka.contrib.persistence.mongodb.mongo.snaps-collection = "snapshots"
akka.contrib.persistence.mongodb.mongo.snaps-index = "snaps_index"
akka.contrib.persistence.mongodb.mongo.journal-write-concern = "Acknowledged"

akka-contrib-persistence-dispatcher.thread-pool-executor.core-pool-size-min = 2
akka-contrib-persistence-dispatcher.thread-pool-executor.core-pool-size-factor = 2
akka-contrib-persistence-dispatcher.thread-pool-executor.core-pool-size-max = 16

# upgrade journal from 0.x to 1.x
akka.contrib.persistence.mongodb.mongo.journal-automatic-upgrade = false
# Legacy serialization (0.x)
akka.contrib.persistence.mongodb.mongo.use-legacy-serialization = false

play.filters.csrf {
  header {
    bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }
    protectHeaders = null
  }
  bypassCorsTrustedOrigins = false
  method {
    whiteList = []
    blackList = ["POST"]
  }
  contentType.blackList = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]
}

play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters.gzip {

    contentType {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/*", "application/javascript", "application/json" ]

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}

lasius.plane.api_key = ${?PLANE_API_KEY}
lasius.plane.base_url = ${?PLANE_BASE_URL}
lasius.plane.project_id= ${?PLANE_PROJECT_ID}